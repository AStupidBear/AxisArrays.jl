{
    "docs": [
        {
            "location": "/", 
            "text": "AxisArrays\n\n\n \n\n\nThis package for the Julia language provides an array type (the \nAxisArray\n) that knows about its dimension names and axis values. This allows for indexing with the axis name without incurring any runtime overhead. AxisArrays can also be indexed by the values of their axes, allowing column names or interval selections. This permits one to implement algorithms that are oblivious to the storage order of the underlying arrays. In contrast to similar approaches in \nImages.jl\n and \nNamedArrays.jl\n, this allows for type-stable selection of dimensions and compile-time axis lookup.  It is also better suited for regularly sampled axes, like samples over time.\n\n\nCollaboration is welcome! This is still a work-in-progress. See \nthe roadmap\n for the project's current direction.\n\n\n\n\nExample of currently-implemented behavior:\n\n\njulia\n Pkg.clone(\nhttps://github.com/JuliaArrays/AxisArrays.jl\n)\n       using AxisArrays, SIUnits\n       import SIUnits.ShortUnits: s, ms, \u00b5s\n\njulia\n fs = 40000 # Generate a 40kHz noisy signal, with spike-like stuff added for testing\n       y = randn(60*fs+1)*3\n       for spk = (sin(0.8:0.2:8.6) .* [0:0.01:.1; .15:.1:.95; 1:-.05:.05]   .* 50,\n                  sin(0.8:0.4:8.6) .* [0:0.02:.1; .15:.1:1; 1:-.2:.1] .* 50)\n           i = rand(round(Int,.001fs):1fs)\n           while i+length(spk)-1 \n length(y)\n               y[i:i+length(spk)-1] += spk\n               i += rand(round(Int,.001fs):1fs)\n           end\n       end\n\njulia\n A = AxisArray([y 2y], Axis{:time}(0s:1s/fs:60s), Axis{:chan}([:c1, :c2]))\n2-dimensional AxisArray{Float64,2,...} with axes:\n    :time, 0.0 s:2.5e-5 s:60.0 s\n    :chan, [:c1,:c2]\nAnd data, a 2400001x2 Array{Float64,2}:\n -3.06091    -6.12181\n  0.152334    0.304668\n  7.86831    15.7366\n -1.4144     -2.82879\n -2.02881    -4.05763\n  9.87901    19.758\n  \u22ee\n -0.0254444  -0.0508888\n  0.204358    0.408717\n -4.80093    -9.60186\n  5.39751    10.795\n  0.976276    1.95255\n  0.336558    0.673116\n\n\n\n\nAxisArrays behave like regular arrays, but they additionally use the axis information to enable all sorts of fancy behaviors. For example, we can specify indices in \nany\n order, just so long as we annotate them with the axis name:\n\n\njulia\n A[Axis{:time}(4)]\n2-dimensional AxisArray{Float64,2,...} with axes:\n    :time, 7.5e-5 s:2.5e-5 s:7.5e-5 s\n    :chan, [:c1,:c2]\nAnd data, a 1x2 SubArray{Float64,2,Array{Float64,2},Tuple{UnitRange{Int64},Colon},2}:\n -1.4144  -2.82879\n\njulia\n A[Axis{:chan}(:c2), Axis{:time}(1:5)]\n1-dimensional AxisArray{Float64,1,...} with axes:\n    :time, 0.0 s:2.5e-5 s:0.0001 s\nAnd data, a 5-element SubArray{Float64,1,Array{Float64,2},Tuple{UnitRange{Int64},Int64},2}:\n -6.12181\n  0.304668\n 15.7366\n -2.82879\n -4.05763\n\n\n\n\nWe can also index by the \nvalues\n of each axis using an \nInterval\n type that selects all values between two endpoints \na .. b\n or the axis values directly. Notice that the returned AxisArray still has axis information itself... and it still has the correct time information for those datapoints!\n\n\njulia\n A[40\u00b5s .. 220\u00b5s, :c1]\n1-dimensional AxisArray{Float64,1,...} with axes:\n    :time, 5.0e-5 s:2.5e-5 s:0.0002 s\nAnd data, a 7-element SubArray{Float64,1,Array{Float64,2},Tuple{UnitRange{Int64},Int64},2}:\n  7.86831\n -1.4144\n -2.02881\n  9.87901\n  0.463201\n  2.49211\n -1.97716\n\njulia\n axes(ans, 1)\nAxisArrays.Axis{:time,SIUnits.SIRange{FloatRange{Float64},Float64,0,0,1,0,0,0,0,0,0}}(5.0e-5 s:2.5e-5 s:0.0002 s)\n\n\n\n\nSometimes, though, what we're really interested in is a window of time about a specific index. The operation above (looking for values in the window from 40\u00b5s to 220\u00b5s) might be more clearly expressed as a symmetrical window about a specific index where we know something interesting happened. To represent this, we use the \natindex\n function:\n\n\njulia\n A[atindex(-90\u00b5s .. 90\u00b5s, 5), :c2]\n1-dimensional AxisArray{Float64,1,...} with axes:\n    :time_sub, -7.5e-5 s:2.5e-5 s:7.5e-5 s\nAnd data, a 7-element SubArray{Float64,1,Array{Float64,2},Tuple{AxisArrays.AxisArray{Int64,1,UnitRange{Int64},Tuple{AxisArrays.Axis{:sub,SIUnits.SIRange{FloatRange{Float64},Float64,0,0,1,0,0,0,0,0,0}}}},Int64},0}:\n 15.7366\n -2.82879\n -4.05763\n 19.758\n  0.926402\n  4.98423\n -3.95433\n\n\n\n\nNote that the returned AxisArray has its time axis shifted to represent the interval about the given index!  This simple concept can be extended to some very powerful behaviors. For example, let's threshold our data and find windows about those threshold crossings.\n\n\njulia\n idxs = find(diff(A[:,:c1] .\n -15) .\n 0)\n242-element Array{Int64,1}: ...\n\njulia\n spks = A[atindex(-200\u00b5s .. 800\u00b5s, idxs), :c1]\n2-dimensional AxisArray{Float64,2,...} with axes:\n    :time_sub, -0.000175 s:2.5e-5 s:0.000775 s\n    :time_rep, SIUnits.SIQuantity{Float64,0,0,1,0,0,0,0,0,0}[0.178725 s,0.806825 s,0.88305 s,1.47485 s,1.50465 s,1.53805 s,1.541025 s,2.16365 s,2.368425 s,2.739 s  \u2026  57.797925 s,57.924075 s,58.06075 s,58.215125 s,58.6403 s,58.96215 s,58.990225 s,59.001325 s,59.48395 s,59.611525 s]\nAnd data, a 39x242 Array{Float64,2}:\n -1.53038     4.72882     5.8706    \u2026  -0.231564      0.624714   3.44076\n -2.24961     2.12414     5.69936       7.00179       2.30993    5.20432\n  5.96311     3.9713     -4.38335       1.32617      -0.686648   0.443454\n  3.86592     5.7466      2.32469       1.30803       3.44585    1.17781\n  3.56837    -3.32178     1.16106      -3.91796       2.41779   -6.17495\n -9.52063    -2.07014    -1.18463   \u2026  -3.55719       2.23117    1.76089\n  \u22ee                                 \u22f1                 \u22ee\n  3.51708    -1.63627     0.281915     -2.41759       3.39403    0.101004\n  0.0421772  -2.13557    -4.71965       0.066912      3.25141   -0.445574\n  3.53238    -3.72221     1.68314   \u2026  -4.15147      -5.25241   -1.77557\n -4.38307     1.38275    -1.33641       3.40342       0.272826  -3.22013\n  2.54846    -0.0194032   2.58679      -0.000676503  -2.71147   -0.288483\n  0.260694   -4.1724     -0.111377      3.283         1.77147   -0.367888\n\n\n\n\nBy indexing with a repeated interval, we have \nadded\n a dimension to the output! The returned AxisArray's columns specify each repetition of the interval, and each datapoint in the column represents a timepoint within that interval, adjusted by the time of the theshold crossing. The best part here is that the returned matrix knows precisely where its data came from, and has labeled its dimensions appropriately. Not only is there the proper time base for each waveform, but we also have recorded the event times as the axis across the columns.\n\n\nNow we can do a cursory clustering analysis on these spike snippets to separate the two \"neurons\" back out into their own groups with Clustering.jl, and plot using Gadfly.\n\n\njulia\n using Clustering\n       Ks = Clustering.kmeans(spks.data, 2);\n\njulia\n using Gadfly\n       plot(spks, x=:time_sub, y=:data, group=:time_rep, color=DataFrames.RepeatedVector(Ks.assignments, size(spks, 1), 1), Geom.line)\n\n\n\n\n\n\n\n\nIndexing\n\n\n\n\nIndexing axes\n\n\nTwo main types of Axes supported by default include:\n\n\n\n\nCategorical axis \u2013 These are vectors of labels, normally symbols or strings. Elements or slices can be selected by elements or vectors of elements.\n\n\nDimensional axis \u2013 These are sorted vectors or iterators that can be selected by \nIntervals\n. These are commonly used for sequences of times or date-times. For regular sample rates, ranges can be used.\n\n\n\n\nHere is an example with a Dimensional axis representing a time sequence along rows and a Categorical axis of symbols for column headers.\n\n\nB = AxisArray(reshape(1:15, 5, 3), .1:.1:0.5, [:a, :b, :c])\nB[Axis{:row}(Interval(.2,.4))] # restrict the AxisArray along the time axis\nB[Interval(0.,.3), [:a, :c]]   # select an interval and two of the columns\n\n\n\n\nUser-defined axis types can be added along with custom indexing behaviors.\n\n\n\n\nExample: compute the intensity-weighted mean along the z axis\n\n\nB = AxisArray(randn(100,100,100), :x, :y, :z)\nItotal = sumz = 0.0\nfor iter in eachindex(B)  # traverses in storage order for cache efficiency\n    I = B[iter]  # intensity in a single voxel\n    Itotal += I\n    sumz += I * iter[axisdim(B, Axis{:z})]  # axisdim \nlooks up\n the z dimension\nend\nmeanz = sumz/Itotal\n\n\n\n\nThe intention is that all of these operations are just as efficient as they would be if you used traditional position-based indexing with all the inherent assumptions about the storage order of \nB\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#axisarrays", 
            "text": "This package for the Julia language provides an array type (the  AxisArray ) that knows about its dimension names and axis values. This allows for indexing with the axis name without incurring any runtime overhead. AxisArrays can also be indexed by the values of their axes, allowing column names or interval selections. This permits one to implement algorithms that are oblivious to the storage order of the underlying arrays. In contrast to similar approaches in  Images.jl  and  NamedArrays.jl , this allows for type-stable selection of dimensions and compile-time axis lookup.  It is also better suited for regularly sampled axes, like samples over time.  Collaboration is welcome! This is still a work-in-progress. See  the roadmap  for the project's current direction.", 
            "title": "AxisArrays"
        }, 
        {
            "location": "/#example-of-currently-implemented-behavior", 
            "text": "julia  Pkg.clone( https://github.com/JuliaArrays/AxisArrays.jl )\n       using AxisArrays, SIUnits\n       import SIUnits.ShortUnits: s, ms, \u00b5s\n\njulia  fs = 40000 # Generate a 40kHz noisy signal, with spike-like stuff added for testing\n       y = randn(60*fs+1)*3\n       for spk = (sin(0.8:0.2:8.6) .* [0:0.01:.1; .15:.1:.95; 1:-.05:.05]   .* 50,\n                  sin(0.8:0.4:8.6) .* [0:0.02:.1; .15:.1:1; 1:-.2:.1] .* 50)\n           i = rand(round(Int,.001fs):1fs)\n           while i+length(spk)-1   length(y)\n               y[i:i+length(spk)-1] += spk\n               i += rand(round(Int,.001fs):1fs)\n           end\n       end\n\njulia  A = AxisArray([y 2y], Axis{:time}(0s:1s/fs:60s), Axis{:chan}([:c1, :c2]))\n2-dimensional AxisArray{Float64,2,...} with axes:\n    :time, 0.0 s:2.5e-5 s:60.0 s\n    :chan, [:c1,:c2]\nAnd data, a 2400001x2 Array{Float64,2}:\n -3.06091    -6.12181\n  0.152334    0.304668\n  7.86831    15.7366\n -1.4144     -2.82879\n -2.02881    -4.05763\n  9.87901    19.758\n  \u22ee\n -0.0254444  -0.0508888\n  0.204358    0.408717\n -4.80093    -9.60186\n  5.39751    10.795\n  0.976276    1.95255\n  0.336558    0.673116  AxisArrays behave like regular arrays, but they additionally use the axis information to enable all sorts of fancy behaviors. For example, we can specify indices in  any  order, just so long as we annotate them with the axis name:  julia  A[Axis{:time}(4)]\n2-dimensional AxisArray{Float64,2,...} with axes:\n    :time, 7.5e-5 s:2.5e-5 s:7.5e-5 s\n    :chan, [:c1,:c2]\nAnd data, a 1x2 SubArray{Float64,2,Array{Float64,2},Tuple{UnitRange{Int64},Colon},2}:\n -1.4144  -2.82879\n\njulia  A[Axis{:chan}(:c2), Axis{:time}(1:5)]\n1-dimensional AxisArray{Float64,1,...} with axes:\n    :time, 0.0 s:2.5e-5 s:0.0001 s\nAnd data, a 5-element SubArray{Float64,1,Array{Float64,2},Tuple{UnitRange{Int64},Int64},2}:\n -6.12181\n  0.304668\n 15.7366\n -2.82879\n -4.05763  We can also index by the  values  of each axis using an  Interval  type that selects all values between two endpoints  a .. b  or the axis values directly. Notice that the returned AxisArray still has axis information itself... and it still has the correct time information for those datapoints!  julia  A[40\u00b5s .. 220\u00b5s, :c1]\n1-dimensional AxisArray{Float64,1,...} with axes:\n    :time, 5.0e-5 s:2.5e-5 s:0.0002 s\nAnd data, a 7-element SubArray{Float64,1,Array{Float64,2},Tuple{UnitRange{Int64},Int64},2}:\n  7.86831\n -1.4144\n -2.02881\n  9.87901\n  0.463201\n  2.49211\n -1.97716\n\njulia  axes(ans, 1)\nAxisArrays.Axis{:time,SIUnits.SIRange{FloatRange{Float64},Float64,0,0,1,0,0,0,0,0,0}}(5.0e-5 s:2.5e-5 s:0.0002 s)  Sometimes, though, what we're really interested in is a window of time about a specific index. The operation above (looking for values in the window from 40\u00b5s to 220\u00b5s) might be more clearly expressed as a symmetrical window about a specific index where we know something interesting happened. To represent this, we use the  atindex  function:  julia  A[atindex(-90\u00b5s .. 90\u00b5s, 5), :c2]\n1-dimensional AxisArray{Float64,1,...} with axes:\n    :time_sub, -7.5e-5 s:2.5e-5 s:7.5e-5 s\nAnd data, a 7-element SubArray{Float64,1,Array{Float64,2},Tuple{AxisArrays.AxisArray{Int64,1,UnitRange{Int64},Tuple{AxisArrays.Axis{:sub,SIUnits.SIRange{FloatRange{Float64},Float64,0,0,1,0,0,0,0,0,0}}}},Int64},0}:\n 15.7366\n -2.82879\n -4.05763\n 19.758\n  0.926402\n  4.98423\n -3.95433  Note that the returned AxisArray has its time axis shifted to represent the interval about the given index!  This simple concept can be extended to some very powerful behaviors. For example, let's threshold our data and find windows about those threshold crossings.  julia  idxs = find(diff(A[:,:c1] .  -15) .  0)\n242-element Array{Int64,1}: ...\n\njulia  spks = A[atindex(-200\u00b5s .. 800\u00b5s, idxs), :c1]\n2-dimensional AxisArray{Float64,2,...} with axes:\n    :time_sub, -0.000175 s:2.5e-5 s:0.000775 s\n    :time_rep, SIUnits.SIQuantity{Float64,0,0,1,0,0,0,0,0,0}[0.178725 s,0.806825 s,0.88305 s,1.47485 s,1.50465 s,1.53805 s,1.541025 s,2.16365 s,2.368425 s,2.739 s  \u2026  57.797925 s,57.924075 s,58.06075 s,58.215125 s,58.6403 s,58.96215 s,58.990225 s,59.001325 s,59.48395 s,59.611525 s]\nAnd data, a 39x242 Array{Float64,2}:\n -1.53038     4.72882     5.8706    \u2026  -0.231564      0.624714   3.44076\n -2.24961     2.12414     5.69936       7.00179       2.30993    5.20432\n  5.96311     3.9713     -4.38335       1.32617      -0.686648   0.443454\n  3.86592     5.7466      2.32469       1.30803       3.44585    1.17781\n  3.56837    -3.32178     1.16106      -3.91796       2.41779   -6.17495\n -9.52063    -2.07014    -1.18463   \u2026  -3.55719       2.23117    1.76089\n  \u22ee                                 \u22f1                 \u22ee\n  3.51708    -1.63627     0.281915     -2.41759       3.39403    0.101004\n  0.0421772  -2.13557    -4.71965       0.066912      3.25141   -0.445574\n  3.53238    -3.72221     1.68314   \u2026  -4.15147      -5.25241   -1.77557\n -4.38307     1.38275    -1.33641       3.40342       0.272826  -3.22013\n  2.54846    -0.0194032   2.58679      -0.000676503  -2.71147   -0.288483\n  0.260694   -4.1724     -0.111377      3.283         1.77147   -0.367888  By indexing with a repeated interval, we have  added  a dimension to the output! The returned AxisArray's columns specify each repetition of the interval, and each datapoint in the column represents a timepoint within that interval, adjusted by the time of the theshold crossing. The best part here is that the returned matrix knows precisely where its data came from, and has labeled its dimensions appropriately. Not only is there the proper time base for each waveform, but we also have recorded the event times as the axis across the columns.  Now we can do a cursory clustering analysis on these spike snippets to separate the two \"neurons\" back out into their own groups with Clustering.jl, and plot using Gadfly.  julia  using Clustering\n       Ks = Clustering.kmeans(spks.data, 2);\n\njulia  using Gadfly\n       plot(spks, x=:time_sub, y=:data, group=:time_rep, color=DataFrames.RepeatedVector(Ks.assignments, size(spks, 1), 1), Geom.line)", 
            "title": "Example of currently-implemented behavior:"
        }, 
        {
            "location": "/#indexing", 
            "text": "", 
            "title": "Indexing"
        }, 
        {
            "location": "/#indexing-axes", 
            "text": "Two main types of Axes supported by default include:   Categorical axis \u2013 These are vectors of labels, normally symbols or strings. Elements or slices can be selected by elements or vectors of elements.  Dimensional axis \u2013 These are sorted vectors or iterators that can be selected by  Intervals . These are commonly used for sequences of times or date-times. For regular sample rates, ranges can be used.   Here is an example with a Dimensional axis representing a time sequence along rows and a Categorical axis of symbols for column headers.  B = AxisArray(reshape(1:15, 5, 3), .1:.1:0.5, [:a, :b, :c])\nB[Axis{:row}(Interval(.2,.4))] # restrict the AxisArray along the time axis\nB[Interval(0.,.3), [:a, :c]]   # select an interval and two of the columns  User-defined axis types can be added along with custom indexing behaviors.", 
            "title": "Indexing axes"
        }, 
        {
            "location": "/#example-compute-the-intensity-weighted-mean-along-the-z-axis", 
            "text": "B = AxisArray(randn(100,100,100), :x, :y, :z)\nItotal = sumz = 0.0\nfor iter in eachindex(B)  # traverses in storage order for cache efficiency\n    I = B[iter]  # intensity in a single voxel\n    Itotal += I\n    sumz += I * iter[axisdim(B, Axis{:z})]  # axisdim  looks up  the z dimension\nend\nmeanz = sumz/Itotal  The intention is that all of these operations are just as efficient as they would be if you used traditional position-based indexing with all the inherent assumptions about the storage order of  B .", 
            "title": "Example: compute the intensity-weighted mean along the z axis"
        }, 
        {
            "location": "/reference/", 
            "text": "#\n\n\nAxisArrays.Axis\n \n \nType\n.\n\n\nType-stable axis-specific indexing and identification with a parametric type.\n\n\nType parameters\n\n\nimmutable Axis{name,T}\n\n\n\n\n\n\nname\n : the name of the axis, a Symbol\n\n\nT\n : the type of the axis\n\n\n\n\nConstructors\n\n\nAxis{name}(I)\n\n\n\n\nArguments\n\n\n\n\nname\n : the axis name Symbol or integer dimension\n\n\nI\n : the indexer, any indexing type that the axis supports\n\n\n\n\nExamples\n\n\nHere is an example with a Dimensional axis representing a time sequence along rows and a Categorical axis of Symbols for column headers.\n\n\nA = AxisArray(reshape(1:60, 12, 5), .1:.1:1.2, [:a, :b, :c, :d, :e])\nA[Axis{:col}(2)] # grabs the second column\nA[Axis{:col}(:b)] # Same as above, grabs column :b (the second column)\nA[Axis{:row}(2)] # grabs the second row\nA[Axis{2}(2:5)] # grabs the second through 5th columns\n\n\n\n\nsource\n\n\n#\n\n\nAxisArrays.AxisArray\n \n \nType\n.\n\n\nAn AxisArray is an AbstractArray that wraps another AbstractArray and adds axis names and values to each array dimension. AxisArrays can be indexed by using the named axes as an alternative to positional indexing by dimension. Other advanced indexing along axis values are also provided.\n\n\nType parameters\n\n\nThe AxisArray contains several type parameters:\n\n\nimmutable AxisArray{T,N,D,Ax} \n: AbstractArray{T,N}\n\n\n\n\n\n\nT\n : the elemental type of the AbstractArray\n\n\nN\n : the number of dimensions\n\n\nD\n : the type of the wrapped AbstractArray\n\n\nAx\n : the names and types of the axes, as a (specialized) NTuple{N, Axis}\n\n\n\n\nConstructors\n\n\nAxisArray(A::AbstractArray, axes::Axis...)\nAxisArray(A::AbstractArray, names::Symbol...)\nAxisArray(A::AbstractArray, vectors::AbstractVector...)\n\n\n\n\nArguments\n\n\n\n\nA::AbstractArray\n : the wrapped array data\n\n\naxes\n or \nnames\n or \nvectors\n : dimensional information for the wrapped array\n\n\n\n\nThe dimensional information may be passed in one of three ways and is entirely optional. When the axis name or value is missing for a dimension, a default is substituted. The default axis names for dimensions \n(1, 2, 3, 4, 5, ...)\n are \n(:row, :col, :page, :dim_4, :dim_5, ...)\n. The default axis values are the integer unit ranges: \n1:size(A, d)\n for each missing dimension \nd\n.\n\n\nIndexing\n\n\nIndexing returns a view into the original data. The returned view is a new AxisArray that wraps a SubArray. Indexing should be type stable. Use \nAxis{axisname}(idx)\n to index based on a specific axis. \naxisname\n is a Symbol specifying the axis to index/slice, and \nidx\n is a normal indexing object (\nInt\n, \nArray{Int,1}\n, etc.) or a custom indexing type for that particular type of axis.\n\n\nTwo main types of axes supported by default include:\n\n\n\n\nCategorical axis \u2013 These are vectors of labels, normally Symbols or strings. Elements or slices can be indexed by elements or vectors of elements.\n\n\nDimensional axis \u2013 These are sorted vectors or iterators that can be indexed by \nClosedInterval()\n. These are commonly used for sequences of times or date-times. For regular sample rates, ranges can be used.\n\n\n\n\nUser-defined axis types can be added along with custom indexing behaviors. To add add a custom type as a Categorical or Dimensional axis, add a trait using \nAxisArrays.axistrait\n. Here is the example of adding a custom Dimensional axis:\n\n\nAxisArrays.axistrait(v::MyCustomAxis) = AxisArrays.Dimensional\n\n\n\n\nFor more advanced indexing, you can define custom methods for \nAxisArrays.axisindexes\n.\n\n\nExamples\n\n\nHere is an example with a Dimensional axis representing a time sequence along rows (it's a FloatRange) and a Categorical axis of Symbols for column headers.\n\n\nA = AxisArray(reshape(1:15, 5, 3), Axis{:time}(.1:.1:0.5), Axis{:col}([:a, :b, :c]))\nA[Axis{:time}(1:3)]   # equivalent to A[1:3,:]\nA[Axis{:time}(ClosedInterval(.2,.4))] # restrict the AxisArray along the time axis\nA[ClosedInterval(0.,.3), [:a, :c]]   # select an interval and two columns\n\n\n\n\nsource\n\n\n#\n\n\nAxisArrays.SortedVector\n \n \nType\n.\n\n\nA SortedVector is an AbstractVector where the underlying data is ordered (monotonically increasing).\n\n\nIndexing that would unsort the data is prohibited. A SortedVector is a Dimensional axis, and no checking is done to ensure that the data is sorted. Duplicate values are allowed.\n\n\nA SortedVector axis can be indexed with an ClosedInterval, with a value, or with a vector of values. Use of a SortedVector{Tuple} axis allows indexing similar to the hierarchical index of the Python Pandas package or the R data.table package.\n\n\nConstructors\n\n\nSortedVector(x::AbstractVector)\n\n\n\n\nKeyword Arguments\n\n\n\n\nx::AbstractVector\n : the wrapped vector\n\n\n\n\nExamples\n\n\nv = SortedVector(collect([1.; 10.; 10:15.]))\nA = AxisArray(reshape(1:16, 8, 2), v, [:a, :b])\nA[ClosedInterval(8.,12.), :]\nA[1., :]\nA[10., :]\n\n## Hierarchical index example with three key levels\n\ndata = reshape(1.:40., 20, 2)\nv = collect(zip([:a, :b, :c][rand(1:3,20)], [:x,:y][rand(1:2,20)], [:x,:y][rand(1:2,20)]))\nidx = sortperm(v)\nA = AxisArray(data[idx,:], SortedVector(v[idx]), [:a, :b])\nA[:b, :]\nA[[:a,:c], :]\nA[(:a,:x), :]\nA[(:a,:x,:x), :]\nA[ClosedInterval(:a,:b), :]\nA[ClosedInterval((:a,:x),(:b,:x)), :]\n\n\n\n\nsource\n\n\n#\n\n\nAxisArrays.axes\n \n \nMethod\n.\n\n\naxes(A::AxisArray) -\n (Axis...)\naxes(A::AxisArray, ax::Axis) -\n Axis\naxes(A::AxisArray, dim::Int) -\n Axis\n\n\n\n\nReturns the tuple of axis vectors for an AxisArray. If an specific \nAxis\n is specified, then only that axis vector is returned.  Note that when extracting a single axis vector, \naxes(A, Axis{1})\n) is type-stable and will perform better than \naxes(A)[1]\n.\n\n\nsource\n\n\n#\n\n\nAxisArrays.axisdim\n \n \nMethod\n.\n\n\naxisdim(::AxisArray, ::Axis) -\n Int\naxisdim(::AxisArray, ::Type{Axis}) -\n Int\n\n\n\n\nGiven an AxisArray and an Axis, return the integer dimension of the Axis within the array.\n\n\nsource\n\n\n#\n\n\nAxisArrays.axisnames\n \n \nMethod\n.\n\n\naxisnames(A::AxisArray)           -\n (Symbol...)\naxisnames(::Type{AxisArray{...}}) -\n (Symbol...)\naxisnames(ax::Axis...)            -\n (Symbol...)\naxisnames(::Type{Axis{...}}...)   -\n (Symbol...)\n\n\n\n\nReturns the axis names of an AxisArray or list of Axises as a tuple of Symbols.\n\n\nsource\n\n\n#\n\n\nAxisArrays.axisvalues\n \n \nMethod\n.\n\n\naxisvalues(A::AxisArray)           -\n (AbstractVector...)\naxisvalues(ax::Axis...)            -\n (AbstractVector...)\n\n\n\n\nReturns the axis values of an AxisArray or list of Axises as a tuple of vectors.\n\n\nsource\n\n\n#\n\n\nAxisArrays.searchsortednearest\n \n \nMethod\n.\n\n\nsearchsortednearest(vec::AbstractVector, x)\n\n\n\n\nLike \nsearchsortedfirst\n or \nsearchsortedlast\n, this returns the the index of the element in the sorted vector \nvec\n whose value is closest to \nx\n, rounding up. If there are multiple elements that are equally close to \nx\n, this will return the first index if \nx\n is less than or equal to those in the vector or the last index if \nx\n is greater.\n\n\nsource\n\n\n#\n\n\nAxisArrays.unsafe_searchsorted\n \n \nMethod\n.\n\n\nunsafe_searchsorted(a::Range, I::ClosedInterval)\n\n\n\n\nReturn the indices of the range that fall within an interval without checking bounds, possibly extrapolating outside the range if needed.\n\n\nsource\n\n\n#\n\n\nBase.join\n \n \nMethod\n.\n\n\njoin(As::AxisArray...)\n\n\n\n\nCombines AxisArrays with matching axis names into a single AxisArray. Unlike \nmerge\n, the inputs are joined along a newly created axis (optionally specified with the \nnewaxis\n keyword argument).  The \nmethod\n keyword argument can be used to specify the join type:\n\n\n:inner\n - keep only those array values at axis values common to all AxisArrays to be joined \n:left\n - keep only those array values at axis values present in the first AxisArray passed \n:right\n - keep only those array values at axis values present in the last AxisArray passed \n:outer\n (default) - keep all array values: create an AxisArray spanning all of the input axis values\n\n\nIf an array value in the output array is not defined in any of the input arrays (i.e. in the case of a left, right, or outer join), it takes the value of the optional \nfillvalue\n keyword argument (default zero).\n\n\nsource\n\n\n#\n\n\nBase.merge\n \n \nMethod\n.\n\n\nmerge(As::AxisArray...)\n\n\n\n\nCombines AxisArrays with matching axis names into a single AxisArray spanning all of the axis values of the inputs. If a coordinate is defined in more than ones of the inputs, it takes its value from last input in which it appears. If a coordinate in the output array is not defined in any of the input arrays, it takes the value of the optional \nfillvalue\n keyword argument (default zero).\n\n\nsource", 
            "title": "Reference"
        }
    ]
}